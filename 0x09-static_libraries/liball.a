!<arch>
0-isupper.c/    1602355835  1000  1000  100664  216       `
#include "holberton.h"
/**
 * _isupper- check c lowercase character
 * @c: string
 * Return: return 1 if c lowercase, 0 if not
 */
int _isupper(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     1602355761  1000  1000  100664  220       `
#include "holberton.h"
/**
 * _memset - sdfg
 * @s: asfd
 * @b: asdfs
 * @n: asdf
 * Return: asfd
 */
char *_memset(char *s, char b, unsigned int n)
{
int i, a;
a = n;
for (i = 0; i < a; i++)
{
s[i] = b;
}
return (s);
}
0-strcat.c/     1602355806  1000  1000  100664  363       `
#include "holberton.h"
/**
 * _strcat - fsdf
 * @dest: sfsad
 * @src: sdfs
 * Return: asd
 */
char *_strcat(char *dest, char *src)
{
int i, i2, i3, largo;
for (i = 0; dest[i] != '\0'; i++)
{
}
for (i2 = 0; src[i2] != '\0'; i2++)
{
}
i2--;
largo = i + i2;
for (i3 = i, i = 0; i3 <= largo; i3++)
{
dest[i3] = src[i];
i++;
}
dest[largo + 1] = '\0';
return (dest);
}

100-atoi.c/     1602355718  1000  1000  100664  319       `
#include <stdio.h>
/**
 * _atoi - sdfas
 *@s:sdfasd
 *Return: sdfasd
 */
int _atoi(char *s)
{
int i, a, b = 0, res = 0;
for (a = 0; s[a] != '\0'; a++)
{
if (s[a] >= 0 && s[a] <= 9)
{
while (s[a] >= 0 && s[a] <= 9)
{
s[b] = s[a];
a++;
b++;
}
}
}
for (i = 0; i <= b; i++)
{
res = res * 10 + s[i] - '0';
}
return (res);
}

1-isdigit.c/    1602355934  1000  1000  100664  216       `
#include "holberton.h"
/**
 * _isdigit- check c lowercase character
 * @c: string
 * Return: return 1 if c lowercase, 0 if not
 */
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
else
{
return (0);
}
}
1-memcpy.c/     1602355951  1000  1000  100664  245       `
#include "holberton.h"
/**
 * _memcpy - fasdf
 * @dest: fdgs
 * @src: sdfgsd
 * @n: saf
 * Return: sadfas
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
int i, a;
a = n;
for (i = 0; i < a; i++)
{
dest[i] = src[i];
}
return (dest);
}

1-strncat.c/    1602355905  1000  1000  100664  262       `
#include "holberton.h"
/**
 *_strncat - sdfa
 *@dest: sad
 *@src: sds
 *@n:sdf
 *Return: sdf
 */
char *_strncat(char *dest, char *src, int n)
{
int i, a;
for (i = 0; dest[i] != '\0'; i++)
{
}
a = 0;
while (a < n)
{
dest[i] = src[a];
a++;
i++;
}
return (dest);
}
2-strchr.c/     1602356014  1000  1000  100664  245       `
#include "holberton.h"
/**
 * _strchr - dfsdf
 * @s: sfad
 * @c: asfasd
 * Return: asdfasdf
 */
char *_strchr(char *s, char c)
{
int i;
for (i = 0; s[i] != '\0'; i++)
{
if (s[i] == c)
{
break;
}
}
if (s[i] == c)
return (s + i);
return ('\0');
}

2-strlen.c/     1602356049  1000  1000  100664  216       `
#include "holberton.h"
/**
 * _strlen - function that returns the length of a string.
 * @s : s is a character
 * Return: value is i
 */
int _strlen(char *s)
{
int i;
for (i = 0; s[i] != '\0'; i++)
{
}
return (i);
}
2-strncpy.c/    1602356101  1000  1000  100664  402       `
#include "holberton.h"
/**
 * char *_strncpy - function that copies a string
 * @dest: destination string
 * @src: source string
 * @n: max byte of src from dest
 * Return: return dest
 */
char *_strncpy(char *dest, char *src, int n)
{
int i = 0, j;
while (src[i] != '\0')
{
i++;
}
for (j = 0; j < n && src[j] != '\0'; j++)
{
dest[j] = src[j];
}
for (; n > i; i++)
{
dest[i] = '\0';
}
return (dest);
}
3-islower.c/    1602356146  1000  1000  100664  217       `
#include "holberton.h"
/**
 * _islower- check c lowercase character
 * @c: string
 * Return: return 1 if c lowercase, 0 if not
 */
int _islower(int c)
{
if (c >= 97 && c <= 122)
{
return (1);
}
else
{
return (0);
}
}

3-puts.c/       1602356177  1000  1000  100664  168       `
#include "holberton.h"
/**
 * _puts - asdas
 * @str: sdfsdf
 */
void _puts(char *str)
{
int i;
for (i = 0; str[i] != '\0'; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}
3-strcmp.c/     1602356218  1000  1000  100664  243       `
#include "holberton.h"
/**
 * _strcmp - fdad
 *@s1: dafs
 *@s2: asdf
 *Return: saf
 */
int _strcmp(char *s1, char *s2)
{
int i;
for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
{
if (s1[i] != s2[i])
{
return (s1[i] - s2[i]);
}
}
return (0);
}

3-strspn.c/     1602356275  1000  1000  100664  345       `
#include "holberton.h"
/**
 * _strspn - hfgh
 * @s: sdafasd
 * @accept: asadfsadf
 * Return: asdfasdsfdf
 */
unsigned int _strspn(char *s, char *accept)
{
int i, i2, cont = 0;
for (i = 0; s[i] != '\0'; i++)
{
for (i2 = 0; accept[i2] != '\0'; i2++)
{
if (s[i] == accept[i2])
{
cont++;
break;
}
}
if (s[i] != accept[i2])
break;
}
return (cont);
}

4-isalpha.c/    1602356319  1000  1000  100664  247       `
#include "holberton.h"
/**
 * _isalpha - check c for alphabetic character
 * @c: string
 *
 * Return: 1 if c is a letter, 0 if not
 */
int _isalpha(int c)
{
if ((c >= 65 && c <= 90) || (c >= 90 && c <= 122))
{
return (1);
}
else
{
return (0);
}
}

4-strpbrk.c/    1602356369  1000  1000  100664  299       `
#include "holberton.h"
/**
 * _strpbrk - sfsdfg
 * @s: trdhdrhdf
 * @accept: gsdfgsd
 * Return: ghdfghgf
 */
char *_strpbrk(char *s, char *accept)
{
int i, i2;
for (i = 0; s[i] != '\0'; i++)
{
for (i2 = 0; accept[i2] != '\0'; i2++)
{
if (s[i] == accept[i2])
{
return (s + i);
}
}
}
return ('\0');
}

5-strstr.c/     1602356443  1000  1000  100664  455       `
#include "holberton.h"
/**
 * _strstr - check the code for Holberton School students.
 * @haystack: int
 * @needle: int
 *
 * Return: Always 0.
 */
char *_strstr(char *haystack, char *needle)
{
int i = 0, i2 = 0;
while (haystack[i] != '\0')
{
while (needle[i2] != '\0' && (haystack[i] == needle[0]))
{
if (haystack[i + i2] == needle[i2])
{
i2++;
}
else
{
break;
}
}
if (needle[i2] != '\0')
{
i2 = 0;
i++;
}
else
{
return (haystack + i);
}
}
return (0);
}

6-abs.c/        1602356475  1000  1000  100664  202       `
#include "holberton.h"
/**
 * _abs - compute absolute value of integer
 * @a: integer
 *
 * Return: return absolute value for an integer
 */
int _abs(int a)
{
if (a < 0)
{
a = a * (-1);
}
return (a);
}
9-strcpy.c/     1602356507  1000  1000  100664  262       `
#include "holberton.h"
/**
 *_strcpy - sdgdfgs
 * @dest: sfdgsdf
 * @src: gdsfgsd
 * Return: sdfgsdfg
 */
char *_strcpy(char *dest, char *src)
{
int i, i2;
for (i = 0; src[i] != '\0'; i++)
{
}
for (i2 = 0; i2 <= i; i2++)
{
dest[i2] = src[i2];
}
return (dest);
}
_putchar.c/     1602349809  1000  1000  100664  247       `
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
  return (write(1, &c, 1));
}

